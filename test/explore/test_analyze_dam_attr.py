import copy
import os
import unittest
import numpy as np
import pandas as pd
import seaborn as sns
from matplotlib import pyplot as plt, gridspec
from data import GagesConfig, GagesSource
from data.config import cfg, cmd, update_cfg
from data.data_input import GagesModel, load_result
from data.gages_input_dataset import GagesDamDataModel, load_ensemble_result
from data.nid_input import NidModel
from explore.stat import statError, ecdf
from utils import unserialize_json, serialize_json, unserialize_json_ordered
from utils.hydro_geo import ind_of_dispersion, coefficient_of_variation
from utils.hydro_util import hydro_logger
from visual.plot_stat import plot_boxs


class MyTestCase(unittest.TestCase):
    """historical data assimilation"""

    def setUp(self) -> None:
        """before all of these, natural flow model need to be generated by config.ini of gages dataset, and it need
        to be moved to right dir manually """
        # self.config_file = os.path.join(config_dir, "dam/config_exp10.ini")
        # self.subdir = r"dam/exp10"
        self.config_file = copy.deepcopy(cfg)
        # args = cmd(sub="dam/exp15", quick_data=1, cache_state=0)
        args = cmd(sub="basic/exp37")
        update_cfg(self.config_file, args)

        self.config_data = GagesConfig(self.config_file)
        # self.nid_file = 'PA_U.xlsx'
        # self.nid_file = 'OH_U.xlsx'
        # self.nid_file = 'NID2018_U.xlsx'
        self.test_epoch = 300

    def test_gages_nse_dam_attr(self):
        figure_dpi = 600
        config_data = self.config_data
        data_dir = config_data.data_path["Temp"]
        data_model = GagesModel.load_datamodel(data_dir,
                                               data_source_file_name='test_data_source.txt',
                                               stat_file_name='test_Statistics.json',
                                               flow_file_name='test_flow.npy',
                                               forcing_file_name='test_forcing.npy',
                                               attr_file_name='test_attr.npy',
                                               f_dict_file_name='test_dictFactorize.json',
                                               var_dict_file_name='test_dictAttribute.json',
                                               t_s_dict_file_name='test_dictTimeSpace.json')
        gages_id = data_model.t_s_dict["sites_id"]

        exp_lst = ["basic_exp37", "basic_exp39", "basic_exp40", "basic_exp41", "basic_exp42", "basic_exp43"]
        self.inds_df, pred_mean, obs_mean = load_ensemble_result(config_data.config_file, exp_lst,
                                                                 config_data.config_file.TEST_EPOCH, return_value=True)
        show_ind_key = 'NSE'

        plt.rcParams['font.family'] = 'serif'
        plt.rcParams['font.serif'] = ['Times New Roman'] + plt.rcParams['font.serif']
        # plot NSE-DOR
        attr_lst = ["RUNAVE7100", "STOR_NOR_2009"]
        attrs_runavg_stor = data_model.data_source.read_attr(gages_id, attr_lst, is_return_dict=False)
        run_avg = attrs_runavg_stor[:, 0] * (10 ** (-3)) * (10 ** 6)  # m^3 per year
        nor_storage = attrs_runavg_stor[:, 1] * 1000  # m^3
        dors = nor_storage / run_avg
        # dor = 0 is not totally same with dam_num=0 (some dammed basins' dor is about 0.00),
        # here for zero-dor we mainly rely on dam_num = 0
        attr_dam_num = ["NDAMS_2009"]
        attrs_dam_num = data_model.data_source.read_attr(gages_id, attr_dam_num, is_return_dict=False)
        df = pd.DataFrame(
            {"DOR": dors, "DAM_NUM": attrs_dam_num[:, 0], show_ind_key: self.inds_df[show_ind_key].values})
        hydro_logger.info("statistics of dors:\n %s", df.describe())
        hydro_logger.info("percentiles of dors:\n %s", df.quantile(q=0.95))
        hydro_logger.info("ecdf of dors:\n %s", ecdf(dors))

        # boxplot
        # add a column to represent the dor range for the df
        dor_value_range_lst = [[0, 0], [0, 0.02], [0.02, 0.05], [0.05, 0.1], [0.1, 0.2], [0.2, 0.4],
                               [0.4, 0.8], [0.8, 10000]]
        dor_range_lst = ["0"] + [str(dor_value_range_lst[i][0]) + "-" + str(dor_value_range_lst[i][1]) for i in
                                 range(1, len(dor_value_range_lst) - 1)] + [">" + str(dor_value_range_lst[-1][0])]

        # add a column to represent the dam_num range for the df
        dam_num_value_range_lst = [[0, 0], [0, 1], [1, 3], [3, 5], [5, 10], [10, 20], [20, 50], [50, 10000]]
        dam_num_range_lst = ["0", "1"] + [str(dam_num_value_range_lst[i][0]) + "-" + str(dam_num_value_range_lst[i][1])
                                          for i in range(2, len(dam_num_value_range_lst) - 1)] + [
                                ">" + str(dam_num_value_range_lst[-1][0])]

        def in_which_range(value_temp):
            if value_temp == 0:
                return "0"
            the_range = [a_range for a_range in dor_value_range_lst if a_range[0] < value_temp <= a_range[1]]
            if the_range[0][0] == dor_value_range_lst[-1][0]:
                the_range_str = ">" + str(the_range[0][0])
            else:
                the_range_str = str(the_range[0][0]) + "-" + str(the_range[0][1])
            return the_range_str

        def in_which_dam_num_range(value_tmp):
            if value_tmp == 0:
                return "0"
            if value_tmp == 1:
                return "1"
            the_ran = [a_ran for a_ran in dam_num_value_range_lst if a_ran[0] < value_tmp <= a_ran[1]]
            if the_ran[0][0] == dam_num_value_range_lst[-1][0]:
                the_ran_str = ">" + str(the_ran[0][0])
            else:
                the_ran_str = str(the_ran[0][0]) + "-" + str(the_ran[0][1])
            return the_ran_str

        df["DOR_RANGE"] = df["DOR"].apply(in_which_range)
        df["DAM_NUM_RANGE"] = df["DAM_NUM"].apply(in_which_dam_num_range)
        df.loc[(df["DAM_NUM"] > 0) & (df["DOR_RANGE"] == "0"), "DOR_RANGE"] = dor_range_lst[1]
        shown_nse_range_boxplots = [-0.5, 1.0]
        sns.set(font="serif", font_scale=1.5, color_codes=True)
        plot_boxs(df, "DOR_RANGE", show_ind_key, ylim=shown_nse_range_boxplots, order=dor_range_lst)
        plt.savefig(
            os.path.join(config_data.data_path["Out"], 'NSE~DOR-boxplots-' + str(shown_nse_range_boxplots) + '.png'),
            dpi=figure_dpi, bbox_inches="tight")
        plt.figure()
        shown_nse_range_boxplots = [0, 1.0]
        sns.set(font="serif", font_scale=1.5, color_codes=True)
        plot_boxs(df, "DAM_NUM_RANGE", show_ind_key, ylim=shown_nse_range_boxplots, order=dam_num_range_lst)
        plt.savefig(os.path.join(config_data.data_path["Out"],
                                 'NSE~DAM_NUM-boxplots-' + str(shown_nse_range_boxplots) + '.png'),
                    dpi=figure_dpi, bbox_inches="tight")
        nums_in_dor_range = [df[df["DOR_RANGE"] == a_range_rmp].shape[0] for a_range_rmp in dor_range_lst]
        ratios_in_dor_range = [a_num / df.shape[0] for a_num in nums_in_dor_range]
        hydro_logger.info("the number and ratio of basins in each dor range\n: %s \n %s", nums_in_dor_range,
                          ratios_in_dor_range)

        nums_in_dam_num_range = [df[df["DAM_NUM_RANGE"] == a_range_rmp].shape[0] for a_range_rmp in dam_num_range_lst]
        ratios_in_dam_num_range = [a_num / df.shape[0] for a_num in nums_in_dam_num_range]
        hydro_logger.info("the number and ratio of basins in each dam_num range\n: %s \n %s", nums_in_dam_num_range,
                          ratios_in_dam_num_range)

        # regplot
        plt.figure()
        sns.set(font="serif", font_scale=1.5, color_codes=True)
        sr = sns.regplot(x="DOR", y=show_ind_key, data=df[df[show_ind_key] >= 0], scatter_kws={'s': 10})
        show_dor_max = df.quantile(q=0.95)["DOR"]  # 30  # max(dors)  # 0.8  # 10
        show_dor_min = min(dors)
        plt.ylim(0, 1)
        plt.xlim(show_dor_min, show_dor_max)
        plt.savefig(os.path.join(config_data.data_path["Out"], 'NSE~DOR-shown-max-' + str(show_dor_max) + '.png'),
                    dpi=figure_dpi, bbox_inches="tight")

        # jointplot
        # dor_range = [0.2, 0.9]
        dor_range = [0.002, 0.2]
        # plt.figure()
        sns.set(font="serif", font_scale=1.5, color_codes=True)
        # g = sns.jointplot(x="DOR", y=show_ind_key, data=df[(df["DOR"] < 1) & (df[show_ind_key] >= 0)], kind="reg",
        #                   marginal_kws=dict(bins=25))
        # g = sns.jointplot(x="DOR", y=show_ind_key, data=df[(df["DOR"] < 1) & (df[show_ind_key] >= 0)], kind="hex",
        #                   color="b", marginal_kws=dict(bins=50))
        g = sns.jointplot(x="DOR", y=show_ind_key,
                          data=df[(df["DOR"] < dor_range[1]) & (df["DOR"] > dor_range[0]) & (df[show_ind_key] >= 0)],
                          kind="hex", color="b")
        g.ax_marg_x.set_xlim(dor_range[0], dor_range[1])
        # g.ax_marg_y.set_ylim(-0.5, 1)
        plt.savefig(os.path.join(config_data.data_path["Out"], 'NSE~DOR(range-)' + str(dor_range) + '-jointplot.png'),
                    dpi=figure_dpi, bbox_inches="tight")

        nid_dir = os.path.join("/".join(self.config_data.data_path["DB"].split("/")[:-1]), "nid", "test")
        nid_input = NidModel.load_nidmodel(nid_dir, nid_source_file_name='nid_source.txt',
                                           nid_data_file_name='nid_data.shp')
        gage_main_dam_purpose = unserialize_json(os.path.join(nid_dir, "dam_main_purpose_dict.json"))
        data_input = GagesDamDataModel(data_model, nid_input, gage_main_dam_purpose)
        dam_coords = unserialize_json_ordered(os.path.join(nid_dir, "dam_points_dict.json"))
        dam_storages = unserialize_json_ordered(os.path.join(nid_dir, "dam_storages_dict.json"))
        dam_ids_1 = list(gage_main_dam_purpose.keys())
        dam_ids_2 = list(dam_coords.keys())
        dam_ids_3 = list(dam_storages.keys())
        assert (all(x < y for x, y in zip(dam_ids_1, dam_ids_1[1:])))
        assert (all(x < y for x, y in zip(dam_ids_2, dam_ids_2[1:])))
        assert (all(x < y for x, y in zip(dam_ids_3, dam_ids_3[1:])))

        sites = list(dam_coords.keys())
        c, ind1, idx_lst_nse_range = np.intersect1d(sites, gages_id, return_indices=True)

        std_storage_in_a_basin = list(map(np.std, dam_storages.values()))
        log_std_storage_in_a_basin = list(map(np.log, np.array(std_storage_in_a_basin) + 1))
        nse_values = self.inds_df["NSE"].values[idx_lst_nse_range]
        df = pd.DataFrame({"DAM_STORAGE_STD": log_std_storage_in_a_basin, show_ind_key: nse_values})
        plt.figure()
        sns.set(font="serif", font_scale=1.5, color_codes=True)
        g = sns.regplot(x="DAM_STORAGE_STD", y=show_ind_key, data=df[df[show_ind_key] >= 0], scatter_kws={'s': 10})
        show_max = max(log_std_storage_in_a_basin)
        show_min = min(log_std_storage_in_a_basin)
        if show_min < 0:
            show_min = 0
        # g.ax_marg_x.set_xlim(show_min, show_max)
        # g.ax_marg_y.set_ylim(0, 1)
        plt.ylim(0, 1)
        plt.xlim(show_min, show_max)
        plt.savefig(os.path.join(config_data.data_path["Out"], 'NSE~' + "DAM_STORAGE_STD" + '.png'), dpi=figure_dpi,
                    bbox_inches="tight")

        gages_loc_lat = data_model.data_source.gage_dict["LAT_GAGE"]
        gages_loc_lon = data_model.data_source.gage_dict["LNG_GAGE"]
        gages_loc = [[gages_loc_lat[i], gages_loc_lon[i]] for i in range(len(gages_id))]
        # calculate index of dispersion, then plot the NSE-dispersion scatterplot
        # Geo coord system of gages_loc and dam_coords are both NAD83
        coefficient_of_var = list(map(coefficient_of_variation, gages_loc, dam_coords.values()))
        coefficient_of_var_min = min(coefficient_of_var)
        coefficient_of_var_max = max(coefficient_of_var)
        dispersion_var = "DAM_GAGE_DIS_VAR"
        nse_values = self.inds_df["NSE"].values[idx_lst_nse_range]
        df = pd.DataFrame({dispersion_var: coefficient_of_var, show_ind_key: nse_values})
        plt.figure()
        sns.set(font="serif", font_scale=1.5, color_codes=True)
        g = sns.regplot(x=dispersion_var, y=show_ind_key, data=df[df[show_ind_key] >= 0], scatter_kws={'s': 10})
        show_max = coefficient_of_var_max
        show_min = coefficient_of_var_min
        if show_min < 0:
            show_min = 0
        # g.ax_marg_x.set_xlim(show_min, show_max)
        # g.ax_marg_y.set_ylim(0, 1)
        plt.ylim(0, 1)
        plt.xlim(show_min, show_max)
        plt.savefig(os.path.join(config_data.data_path["Out"], 'NSE~' + dispersion_var + '.png'), dpi=figure_dpi,
                    bbox_inches="tight")

        idx_dispersions = list(map(ind_of_dispersion, gages_loc, dam_coords.values()))
        idx_dispersion_min = min(idx_dispersions)
        idx_dispersion_max = max(idx_dispersions)
        dispersion_var = "DAM_DISPERSION_BASIN"
        # nse_range = [0, 1]
        # idx_lst_nse_range = inds_df_now[(inds_df_now[show_ind_key] >= nse_range[0]) & (inds_df_now[show_ind_key] < nse_range[1])].index.tolist()
        nse_values = self.inds_df["NSE"].values[idx_lst_nse_range]
        df = pd.DataFrame({dispersion_var: idx_dispersions, show_ind_key: nse_values})
        # g = sns.regplot(x=dispersion_var, y=show_ind_key, data=df[df[show_ind_key] >= 0], scatter_kws={'s': 10})
        if idx_dispersion_min < 0:
            idx_dispersion_min = 0
        plt.ylim(0, 1)
        plt.xlim(idx_dispersion_min, idx_dispersion_max)
        # plt.figure()
        sns.set(font="serif", font_scale=1.5, color_codes=True)
        g = sns.jointplot(x=dispersion_var, y=show_ind_key, data=df[df[show_ind_key] >= 0], kind="reg")
        g.ax_marg_x.set_xlim(idx_dispersion_min, idx_dispersion_max)
        g.ax_marg_y.set_ylim(0, 1)
        plt.show()

    def test_gages_dam_stor_hist_basin(self):
        nid_dir = os.path.join("/".join(self.config_data.data_path["DB"].split("/")[:-1]), "nid", "test")
        dam_storages = unserialize_json(os.path.join(nid_dir, "dam_storages_dict.json"))

        sites = np.array(list(dam_storages.keys()))

        dor_2 = 0.02
        source_data_dor2 = GagesSource.choose_some_basins(self.config_data,
                                                          self.config_data.model_dict["data"]["tRangeTrain"],
                                                          screen_basin_area_huc4=False,
                                                          DOR=dor_2)
        sites_id_largedam = source_data_dor2.all_configs['flow_screen_gage_id']
        c, ind1, idx_lst_nse_range = np.intersect1d(sites, sites_id_largedam, return_indices=True)

        num = 4
        num_lst = np.sort(np.random.choice(len(c), num, replace=False))
        chosen_sites = c[num_lst]
        hist_bins = 20

        fig = plt.figure(figsize=(8, 9))
        gs = gridspec.GridSpec(2, 2)

        for i in range(num):
            ax_k = plt.subplot(gs[int(i / 2), i % 2])
            ax_k.hist(dam_storages[chosen_sites[i]], hist_bins, orientation='vertical', color='red', alpha=0.5)
        plt.show()

    def test_read_sites_id_see_dor(self):
        exp_lst = ["exp18", "exp19", "exp20", "exp21", "exp22", "exp23"]
        sub_lst = ["0", "1"]
        diff_lst = ["dictTimeSpace.json", "test_dictTimeSpace.json", "test_dictTimeSpace_2.json"]
        for exp_str in exp_lst:
            for sub_str in sub_lst:
                comp_sites = []
                for item in diff_lst:
                    gage_id_file = os.path.join(self.config_data.config_file["ROOT_DIR"], "temp", "gages", "ecoregion",
                                                exp_str, sub_str, item)
                    usgs_id = unserialize_json(gage_id_file)["sites_id"]
                    assert (all(x < y for x, y in zip(usgs_id, usgs_id[1:])))
                    comp_sites.append(usgs_id)
                    # mm/year 1-km grid,  megaliters total storage per sq km  (1 megaliters = 1,000,000 liters = 1,000 cubic meters)
                    # attr_lst = ["RUNAVE7100", "STOR_NID_2009"]
                    attr_lst = ["RUNAVE7100", "STOR_NOR_2009"]
                    source_data = GagesSource.choose_some_basins(self.config_data,
                                                                 self.config_data.model_dict["data"]["tRangeTrain"],
                                                                 screen_basin_area_huc4=False, sites_id=usgs_id)
                    data_attr, var_dict, f_dict = source_data.read_attr(usgs_id, attr_lst)
                    run_avg = data_attr[:, 0] * (10 ** (-3)) * (10 ** 6)  # m^3 per year
                    nor_storage = data_attr[:, 1] * 1000  # m^3
                    dors = nor_storage / run_avg
                    results = [round(i, 3) for i in dors]
                    hydro_logger.info(exp_str + "-" + sub_str + "-" + item + " DOR: %s", results)
                hydro_logger.info("the intersection of each pair of sites: %s, %s, %s",
                                  np.intersect1d(comp_sites[0], comp_sites[1]),
                                  np.intersect1d(comp_sites[0], comp_sites[2]),
                                  np.intersect1d(comp_sites[1], comp_sites[2]))
